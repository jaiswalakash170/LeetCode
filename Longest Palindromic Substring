5. Longest Palindromic Substring
Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.

Example 1:
Input: "babad"
Output: "bab"
Note: "aba" is also a valid answer.

Example 2:
Input: "cbbd"
Output: "bb"

class Solution {
    public String longestPalindrome(String s) {
        int len = s.length();
        if((len == 0) || (len == 1))
        {
            return s;
        }
        
        boolean[][] dp = new boolean[len][len];
        int maxLen = 0;
        String finalSubString = "";
        
        //Length = 1
        for(int i=0; i<len; i++)
        {
            dp[i][i] = true;
            if(maxLen < s.substring(i, i+1).length())
            {
                maxLen = s.substring(i, i+1).length();
                finalSubString = s.substring(i, i+1);
            }
        }
            
        //Length = 2
        for(int i=0; i<len-1; i++)
        {
            if(s.charAt(i) == s.charAt(i+1))
            {
                dp[i][i+1] = true;
                if(maxLen < s.substring(i, i+2).length())
                {
                    maxLen = s.substring(i, i+2).length();
                    finalSubString = s.substring(i, i+2);
                }
            }
        }
            
        //Length > 2
        int j;
        for(int k=2; k<len; k++)
        {
            for(int i=0; i<len-k; i++)
            {
                j = k + i;
                if((s.charAt(i) == s.charAt(j)) && (dp[i+1][j-1] == true))
                {
                    dp[i][j] = true;
                    if(maxLen < s.substring(i, j+1).length())
                    {
                        maxLen = s.substring(i, j+1).length();
                        finalSubString = s.substring(i, j+1);
                    }
                }
            }
        }
        return finalSubString;
    }
}