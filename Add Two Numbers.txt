/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode tempL1 = l1.next, tempL2 = l2.next, finalList, tempFinal;
        int addHead = ((l1 == null) ? 0 : (l1.val)) + ((l2 == null) ? 0 : (l2.val));
        finalList = new ListNode(addHead%10);
        tempFinal = finalList;
        int carry = addHead/10;
        if((tempL1 == null) && (tempL2 == null))
        {
            if(carry != 0)
            {
                tempFinal.next = new ListNode(carry);
            }
        }
        while(((tempL1 != null) || (tempL2 != null)) || (carry != 0))
        {
            addHead = carry;
            if((tempL1 == null) && (tempL2 == null))
            {
                
            }
            else if(tempL1 == null)
            {
                addHead += tempL2.val;
                tempL2 = tempL2.next;
            }
            else if(tempL2 == null)
            {
                addHead += tempL1.val;
                tempL1 = tempL1.next;
            }
            else
            {
                addHead += (tempL1.val + tempL2.val);
                tempL1 = tempL1.next;
                tempL2 = tempL2.next;
            }
            tempFinal.next = new ListNode(addHead%10);
            tempFinal = tempFinal.next;
            carry = addHead/10;
        }
        return finalList;
    }
}